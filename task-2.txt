2) Write a write up on Difference between copy by value and copy by reference.

Ans: All primitive datatypes can be considered to be using copy by value, we can assign the values to the variables and can also 
     overwrite them. 
     Ex: var a = 5;
	 var b = a;
	 a = 10;
	 console.log(a,b); // output: 10 5
     From the ex we using assigment operator we performed call by value.
     
     Copy by refernce is basically used for composite datatypes (arays, objects) from the name we take the value from reference, 
     if one value of array is change it effects the both arrays that used same reference.
     Ex:1) var arr1 = [1,2,3];
	 var arr2 = arr1;
	 arr2[0] = 10;
	 console.log(arr1,arr2); //output: [10,2,3] [10,2,3]
	2) var user = {name : 'alex'};
	   var admin = user;
	   admin.name = 'Sam'; //value changed
	   console.log(user.name); // output: Sam
     from the above ex using reference by value method we demonstrated both arrays and objects.

3) How to copy by value a composite datatype (arays+objects).

Ans: There are 3 ways to copy by value for composite data types.
     1) Using the spread (...) operator:
	Spread operator allows an iterable to expand in places where 0+ arguments are expected. It is mostly used in the variable array
	where there is more than 1 values are expected. It allows us the privilege to obtain a list of parameters from an array.Using
	spread will clone your object. Note this will be a shallow copy.
	Ex: var a = [1,2,3];
	    var b = [...a];
	    console.log(a,b); //output: [1,2,3] [1,2,3]
	    b[2] = 100;
	    cosole.log(a,b);//output: [1,2,3] [1,2,100]
	In the above example when copied variable value is changed but original variable value remain same.
     2) Using the Object.assign() method:
	The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It returns
	the target object. Note this will be a shallow copy.
	Ex: var a = [1,2,3];
	    var b = Object.assign([],a);
	    console.log(a,b); //output: [1,2,3] [1,2,3]
	    b[2] = 80;
	    console.log(a,b)//output: [1,2,3] [1,2,80]
	Note the empty [] as the first argument, this will ensure you don't mutate the original object.
	     
     3) Using the JSON.stringify() and JSON.parse() methods:
	The JSON object, available in all modern browsers, has two useful methods to deal with JSON-formatted content: parse and stringify.
	JSON.parse() takes a JSON string and transforms it into a JavaScript object. JSON.stringify() takes a JavaScript object and 
	transforms it into a JSON string.Using JSON.parse() and JSON.stringify() for copy performs deep copy.
	Ex: var a = [1,2,3];
	    var b = JSON.parse(JSON.stringify(a));
	    console.log(a,b); //output: [1,2,3] [1,2,3]
	    b[2] = 100;
	    cosole.log(a,b); //output: [1,2,3] [1,2,100]
	The deep copy is a true copy for nested objects. Shallow copy copies only reference in case of nested objects.
















